import { NextRequest, NextResponse } from "next/server";
import db from "@/lib/db";
import type { RowDataPacket, ResultSetHeader } from "mysql2";

interface EmotionLog extends RowDataPacket {
  id: number;
  child_id: number;
  child_name: string;
  class_name: string;
  emotion_id: number;
  emotion_label?: string;
  date: string;
  session: string;
  created_at: string;
}

interface Emotion extends RowDataPacket {
  id: number;
  label: string;
}

// GET: L·∫•y danh s√°ch c·∫£m x√∫c v·ªõi nhi·ªÅu ƒëi·ªÅu ki·ªán l·ªçc
export async function GET(request: NextRequest) {
  let connection;
  try {
    const { searchParams } = new URL(request.url);
    const child_id = searchParams.get("child_id");
    const date = searchParams.get("date");
    const from = searchParams.get("from");
    const to = searchParams.get("to");
    const lastDays = searchParams.get("lastDays");
    const lastMonths = searchParams.get("lastMonths");

    connection = await db.getConnection();
    
    let query = `
      SELECT el.*, e.label AS emotion_label
      FROM emotion_logs el
      JOIN emotions e ON el.emotion_id = e.id
      WHERE 1=1
    `;
    const params: (string | number)[] = [];

    // L·ªçc theo child_id
    if (child_id) {
      query += " AND el.child_id = ?";
      params.push(child_id);
    }

    // L·ªçc theo ng√†y c·ª• th·ªÉ
    if (date && !lastDays && !lastMonths) {
      query += " AND el.date = ?";
      params.push(date);
    }

    // L·ªçc theo kho·∫£ng th·ªùi gian
    if (from && to) {
      query += " AND el.date BETWEEN ? AND ?";
      params.push(from, to);
    }

    // L·ªçc theo s·ªë ng√†y g·∫ßn nh·∫•t
    if (lastDays) {
      query += " AND el.date >= DATE_SUB(CURDATE(), INTERVAL ? DAY)";
      params.push(parseInt(lastDays));
    }

    // L·ªçc theo s·ªë th√°ng g·∫ßn nh·∫•t
    if (lastMonths) {
      query += " AND el.date >= DATE_SUB(CURDATE(), INTERVAL ? MONTH)";
      params.push(parseInt(lastMonths));
    }

    query += " ORDER BY el.date DESC, el.created_at DESC";

    console.log("üìã Query:", query);
    console.log("üìã Params:", params);

    const [rows] = await connection.execute<EmotionLog[]>(query, params);
    console.log("üì• K·∫øt qu·∫£ tr·∫£ v·ªÅ:", rows.length, "b·∫£n ghi");
    
    return NextResponse.json(rows);
  } catch (error) {
    console.error("‚ùå L·ªói GET emotion_logs:", error);
    return NextResponse.json({ error: "L·ªói load data" }, { status: 500 });
  } finally {
    if (connection) connection.release();
  }
}

// POST: Th√™m c·∫£m x√∫c m·ªõi (gi·ªØ nguy√™n nh∆∞ c≈©)
export async function POST(request: NextRequest) {
  let connection;
  try {
    const { emotions }: { emotions: { child_id: number; child_name: string; class_name: string; emotion: string; date: string }[] } = await request.json();
    console.log("Received POST data:", emotions);

    if (!emotions || !Array.isArray(emotions)) {
      return NextResponse.json({ error: "D·ªØ li·ªáu emotions kh√¥ng h·ª£p l·ªá" }, { status: 400 });
    }

    connection = await db.getConnection();
    await connection.beginTransaction();

    for (const emo of emotions) {
      const { child_id, child_name, class_name, emotion, date } = emo;

      // Validate input
      if (!child_id || !child_name || !class_name || !emotion || !date) {
        await connection.rollback();
        return NextResponse.json({ error: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" }, { status: 400 });
      }

      // Ki·ªÉm tra s·ªë l·∫ßn ch·ªçn c·∫£m x√∫c trong ng√†y
      const [existingRows] = await connection.execute<EmotionLog[]>(
        "SELECT session FROM emotion_logs WHERE child_id = ? AND date = ?",
        [child_id, date]
      );
      console.log("Existing rows for child_id and date:", existingRows);
      if (existingRows.length >= 2) {
        await connection.rollback();
        return NextResponse.json(
          { error: `B√© ƒë√£ ch·ªçn ƒë·ªß 2 c·∫£m x√∫c trong ng√†y ${date}` },
          { status: 409 }
        );
      }

      // X√°c ƒë·ªãnh session
      const session = existingRows.length === 0 ? "morning" : "afternoon";
      console.log("Assigned session:", session);

      // Ki·ªÉm tra xem session ƒë√£ t·ªìn t·∫°i ch∆∞a
      const [sessionRows] = await connection.execute<EmotionLog[]>(
        "SELECT id FROM emotion_logs WHERE child_id = ? AND date = ? AND session = ?",
        [child_id, date, session]
      );
      if (sessionRows.length > 0) {
        await connection.rollback();
        return NextResponse.json(
          { error: `B√© ƒë√£ ch·ªçn c·∫£m x√∫c cho bu·ªïi ${session === "morning" ? "s√°ng" : "chi·ªÅu"} trong ng√†y ${date}` },
          { status: 409 }
        );
      }

      // T√¨m emotion_id
      const [emotionRows] = await connection.execute<Emotion[]>(
        "SELECT id FROM emotions WHERE label = ?",
        [emotion]
      );
      console.log("Emotion rows:", emotionRows);
      if (emotionRows.length === 0) {
        await connection.rollback();
        return NextResponse.json({ error: `Kh√¥ng t√¨m th·∫•y c·∫£m x√∫c: ${emotion}` }, { status: 404 });
      }

      const emotion_id = emotionRows[0].id;

      // Th√™m b·∫£n ghi m·ªõi
      await connection.execute(
        `INSERT INTO emotion_logs (child_id, child_name, class_name, emotion_id, date, session, created_at) 
         VALUES (?, ?, ?, ?, ?, ?, NOW())`,
        [child_id, child_name, class_name, emotion_id, date, session]
      );
      console.log("Inserted emotion log for:", { child_id, date, session });
    }

    await connection.commit();
    console.log("Transaction committed");
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("‚ùå L·ªói POST emotion_logs:", error);
    if (connection) await connection.rollback();
    return NextResponse.json({ error: `L·ªói l∆∞u d·ªØ li·ªáu:` }, { status: 500 });
  } finally {
    if (connection) connection.release();
  }
}

// DELETE: X√≥a b·∫£n ghi c·∫£m x√∫c theo id
export async function DELETE(request: NextRequest) {
  let connection;
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");
    if (!id) return NextResponse.json({ error: "Thi·∫øu id" }, { status: 400 });

    connection = await db.getConnection();
    const [result] = await connection.execute<ResultSetHeader>("DELETE FROM emotion_logs WHERE id = ?", [id]);
    if (result.affectedRows === 0) {
      return NextResponse.json({ error: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi" }, { status: 404 });
    }
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("‚ùå L·ªói DELETE emotion_logs:", error);
    return NextResponse.json({ error: "L·ªói x√≥a d·ªØ li·ªáu" }, { status: 500 });
  } finally {
    if (connection) connection.release();
  }
}